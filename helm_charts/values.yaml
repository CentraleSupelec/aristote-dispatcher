models:
  - name: name #must be lowercase
    model: ""
    servedModelName: ""
    quantization: "" 
    dtype: ""
    gpuMemoryUtilization: "" 
    huggingface_token : ""
    ropeScaling:
      enabled: false
      jsonConfiguration: "{\"type\":\"dynamic\",\"factor\":4.0}"
      theta: "500000"
    replicaCount: 1


tokens: # Lowest priority is more important
  - token: token
    priority: 1
    threshold: 10

sender:
  image:
    repository: centralesupelec/aristote-dispatcher-sender
    pullPolicy: IfNotPresent
    tag: latest
  port: 8080
  resources:
    requests:
      cpu: 500m
      memory: "1024Mi"
    limits:
      cpu: 1000m
      memory: "2048Mi"
  replicaCount: 1
  logLevel: "20"
  env: []
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  tolerations: []
  affinity: {}
  nodeSelector: {}  

consumer:
  image:
    repository: centralesupelec/aristote-dispatcher-consumer
    pullPolicy: IfNotPresent
    tag: latest
  port: 8080
  resources:
    requests:
      cpu: 500m
      memory: "512Mi"
    limits:
      cpu: 1000m
      memory: "1024Mi"
  replicaCount: 1
  logLevel: "20"
  env: []
  annotations: {}
  podAnnotations: {}
  podSecurityContext: {}
  securityContext: {}
  tolerations: []
  affinity: {}
  nodeSelector: {} 

inferenceserver:
  image:
    repository: vllm/vllm-openai
    pullPolicy: IfNotPresent
    tag: latest
  port: 8000
  resources:
    requests:
      cpu: 500m
      memory: "512Mi"
    limits:
      cpu: 10000m
      memory: "64Gi"
      nvidia.com/gpu: 1
  env: []
  podAnnotations: {}
  podSecurityContext: {}

rabbitmq:
  internal: True
  existingSecret: ""
  secretKeyOverride:
    enabled: False
    username: ""
    password: ""
  host: ""
  port: "5672"
  managementPort: "15672"
  auth:
    username: user
    password: password

database:
  internal: True
  type: mysql
  host: ""
  port: 3306
  existingSecret: ""
  secretKeyOverride:
    enabled: False
    username: ""
    password: ""
  auth:
    rootPassword: root
    username: user
    password: password
    database: test
  initdbScriptsConfigMap: database-config-map

mysql:
  enabled: True
  auth:
    rootPassword: root
    username: user
    password: password
    database: test
  initdbScriptsConfigMap: database-config-map

postgresql:
  enabled: False
  auth:
    rootPassword: root
    username: user
    password: password
    database: test
  initdbScriptsConfigMap: database-config-map

ingress:
  enabled: True
  className: nginx
  annotations: 
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
    cert-manager.io/cluster-issuer: letsencrypt-prod
  hosts:
    - host: hostname
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: 
  - secretName: secret-tls-vllm
    hosts:
      - hostname

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
